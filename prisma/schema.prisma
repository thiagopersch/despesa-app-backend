// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(uuid())
  name            String
  login           String         @unique
  password        String
  change_password Boolean?       @default(true)
  status          Boolean?       @default(true)
  user_profiles   User_profiles? @relation(fields: [user_profilesId], references: [id])
  user_profilesId String?
  createdAt       DateTime       @default(now()) @db.Timestamptz()
  updatedAt       DateTime       @updatedAt @db.Timestamptz()
  deletedAt       DateTime?      @db.Timestamptz()
  Session         Session[]
  Expense         Expense[]
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  User         User?    @relation(fields: [userId], references: [id])
  expires      DateTime
}

model Profile {
  id                String           @id @default(uuid())
  code              String           @unique
  name              String
  status            Boolean          @default(true)
  user_profiles     User_profiles?   @relation(fields: [user_profilesId], references: [id])
  user_profilesId   String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deletedAt         DateTime?
  Module_profiles   Module_profiles? @relation(fields: [module_profilesId], references: [id])
  module_profilesId String?
}

model Module {
  id                String           @id @default(uuid())
  code              String           @unique
  name              String
  status            Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deletedAt         DateTime?
  Module_profiles   Module_profiles? @relation(fields: [module_profilesId], references: [id])
  module_profilesId String?
}

model User_profiles {
  id         String    @id @default(uuid())
  user_id    User[]
  profile_id Profile[]
  read       Boolean   @default(true)
  write      Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model Module_profiles {
  id         String    @id @default(uuid())
  module_id  Module[]
  profile_id Profile[]
  status     Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
}

model Year {
  id        String    @id @default(uuid())
  year      String    @unique
  status    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Expense   Expense[]
}

model Month {
  id        String    @id @default(uuid())
  name      String    @unique
  status    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Expense   Expense[]
}

model Payment_methods {
  id        String    @id @default(uuid())
  name      String    @unique
  status    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Expense   Expense[]
}

model Priority {
  id        String    @id @default(uuid())
  name      String    @unique
  status    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Expense   Expense[]
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  status    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Expense   Expense[]
}

model Tags {
  id        String    @id @default(uuid())
  name      String    @unique
  status    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Expense   Expense[]
}

model Type_accounts {
  id         String    @id @default(uuid())
  bank_code  String    @unique
  bank_name  String    @unique
  bank_type  String
  bank_color String
  status     Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  Expense    Expense[]
}

model Situation {
  id        String    @id @default(uuid())
  name      String    @unique
  color     String
  status    Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Expense   Expense[]
}

model Expense {
  id              String          @id @default(uuid())
  user            User            @relation(fields: [userId], references: [id])
  userId          String
  paymentMethod   Payment_methods @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String
  priority        Priority        @relation(fields: [priorityId], references: [id])
  priorityId      String
  month           Month           @relation(fields: [monthId], references: [id])
  monthId         String
  year            Year            @relation(fields: [yearId], references: [id])
  yearId          String
  category        Category        @relation(fields: [categoryId], references: [id])
  categoryId      String
  tags            Tags            @relation(fields: [tagsId], references: [id])
  tagsId          String
  typeAccount     Type_accounts   @relation(fields: [typeAccountId], references: [id])
  typeAccountId   String
  situation       Situation       @relation(fields: [situationId], references: [id])
  situationId     String
  name            String
  description     String
  amount_to_pay   Float
  amount_paid     Float
  pay_day         DateTime
  due_date        DateTime
  fixed_expense   Boolean
  repeat          Boolean
  number_repeat   String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?
}
